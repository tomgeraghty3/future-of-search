Create a specification for a customer-facing agent that helps users search for information. It must support two types of users: logged-in customers and anonymous visitors.
The agent will be built using the Strands framework and use Claude 3.7 Sonnet on Amazon Bedrock for the model. It should run on AWS AgentCore Runtime. It should return a JSON payload comprised of "personalised", "summary" and "links". For example:
"{
	"personalised": "Personal summary of how this topic relates to the customer",
	"summary": "General summary of this topic",
	"links": [
		"www.mysite.com/link-one",
		"www.mysite.com/link-two"
}"
The agent should accept 2 arguments. The first is a natural language search sentence from the customer and the second is a User ID (if the user is logged in, or empty otherwise). The agent should query an Amazon Bedrock Knowledge Base using the `RetrieveAndGenereate` API for the sentence the user has searched. This should retrieve relevant information for the searched topic, summarise it and cite the original sources. The summary should be set as the "summary" field in the response. The links/citations used within the "summary"/returned from the `RetrieveAndGenereate` API should be extracted and returned as a list of links (a list of Strings) that is then set as the "links" field in the response. It must never fabricate facts, policies, or prices, and should always prefer retrieved snippets. The response should also not include the words "search results" or anything to that degree. If no topic exists in the Bedrock Knowledge Base for the topic then the Agent should return "No AI summary could be found for the specified query".
If the user is logged in, i.e. if the User ID was specified to the agent, the agent should also lookup how the topic relates specifically to that user. To do this, the agent should query all available tools that exist in an AgentCore Gateway (that is acting as an MCP Server) and select the most relevant one for the topic, if any and invoke that tool (via the Gateway) with the User ID. Whatever the tool returns should be set as the "personalised" field in the response. If no tool exists for that topic then the "personalised" field in the response should be empty. If the user is NOT loggged in, i.e. the User ID was not specified to the agent (or is empty), then the "personalised" field should be empty.
The agent should handle both user types gracefully, provide clear and concise responses, and be as simple as possible, with as many few parts as possible as this is a small MVP product. 
Finally, the Agent should make use of Bedrock Guardrails to ensure the response contains no harmful messages, is coherent etc.
The specification should include success metrics to evaluate the agents performance. These metrics include: responses based on actual snippets in the AWS Bedrock Knowledge Base; responses including a cited source; response latency averaging no more than 2 seconds; streams a coherent answer from Clause Sonnet 3.7 Foundation Model; makes use of AWS AgentCore Gateway when appropriate to personalise results; makes use of Bedrock Guardrails for safety/guardrails. The spec should cover the functional requirements, user flows for both customer types, integration points with AWS fully managed services, and the success criteria.